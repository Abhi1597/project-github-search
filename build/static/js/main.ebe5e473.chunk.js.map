{"version":3,"sources":["components/UserInfo.js","components/Table.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["UserInfo","props","console","log","name","id","className","style","maxHeight","src","avatar_url","login","type","href","html_url","repos_url","score","Table","componentDidMount","axios","get","params","q","userSearch","then","response","setState","profiles","data","items","state","catch","error","showUser","showTable","width","height","this","scope","map","e","key","onClick","Component","Search","handleChange","user","target","value","clicked","handleSubmit","resetInput","placeholder","aria-label","aria-describedby","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RAwEeA,EArEE,SAACC,GACbC,QAAQC,IAAIF,EAAMG,KAAKC,IAIxB,OAEI,6BACK,yBAAKC,UAAY,sBACd,yBAAKA,UAAY,OACb,yBAAKA,UAAY,SACb,yBAAKA,UAAY,YAAYC,MATnC,CACVC,UAAY,SAQiDC,IAAKR,EAAMG,KAAKM,cAEjE,yBAAKJ,UAAY,SACb,yBAAKA,UAAY,mBACb,yBAAKA,UAAY,SACb,uCAEJ,yBAAKA,UAAY,SACb,6BAAML,EAAMG,KAAKO,MAAjB,OAGR,yBAAKL,UAAY,mBACb,yBAAKA,UAAY,SACb,uCAEJ,yBAAKA,UAAY,SACb,6BAAML,EAAMG,KAAKQ,KAAjB,OAGR,yBAAKN,UAAY,mBACb,yBAAKA,UAAY,SACb,sDAEJ,yBAAKA,UAAY,SACb,6BAAK,uBAAGO,KAAMZ,EAAMG,KAAKU,UAApB,oBAGb,yBAAKR,UAAY,mBACb,yBAAKA,UAAY,SACb,oCAEJ,yBAAKA,UAAY,SACb,6BAAML,EAAMG,KAAKC,GAAjB,OAGR,yBAAKC,UAAY,mBACb,yBAAKA,UAAY,SACb,wDAEJ,yBAAKA,UAAY,SACb,6BAAK,uBAAGO,KAAMZ,EAAMG,KAAKW,WAApB,oBAAL,OAGR,yBAAKT,UAAY,mBACb,yBAAKA,UAAY,SACb,2CAEJ,yBAAKA,UAAY,SACb,6BAAML,EAAMG,KAAKY,MAAjB,Y,iBC3DXC,E,YACjB,WAAYhB,GAAQ,IAAD,8BACf,4CAAMA,KAQViB,kBAAoB,WAChBC,IAAMC,IAAI,sCAAuC,CAC7CC,OAAQ,CACNC,EAAG,EAAKrB,MAAMsB,cAEfC,MAAK,SAAAC,GACN,EAAKC,SAAS,CAACC,SAAWF,EAASG,KAAKC,QACxC3B,QAAQC,IAAI,EAAK2B,MAAMH,aAExBI,OAAM,SAAUC,GACf9B,QAAQC,IAAI6B,OAnBD,EAuBnBC,SAAW,SAACL,GACR,EAAKF,SAAS,CACVtB,KAAOwB,EACPM,WAAY,KAxBhB,EAAKJ,MAAQ,CACTH,SAAW,GACXvB,KAAO,GACP8B,WAAW,GALA,E,sEA+BT,IAAD,OACC3B,EAAQ,CACV4B,MAAQ,OACRC,OAAS,QAGb,OACI,6BACKC,KAAKP,MAAMI,WACR,2BAAO5B,UAAU,SACb,2BAAOA,UAAU,cACb,4BACI,wBAAIgC,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,WAGR,+BACKD,KAAKP,MAAMH,SAASY,KAAI,SAACC,GACtB,OACI,wBAAIC,IAAOD,EAAEnC,IACT,4BAAKmC,EAAEnC,GAAP,KACA,4BAAKmC,EAAE7B,MAAP,KACA,4BAAK,yBAAK+B,QAAW,WAAK,EAAKT,SAASO,IAAKjC,MAASA,EAAOE,IAAK+B,EAAE9B,cACpE,gCAAM8B,EAAE5B,KAAR,KACA,4BAAK4B,EAAExB,MAAP,YAOtBqB,KAAKP,MAAMI,WACT,kBAAC,EAAD,CAAU9B,KAAQiC,KAAKP,MAAM1B,Y,GAnEduC,aCAdC,E,YACjB,WAAY3C,GAAO,IAAD,8BACd,4CAAMA,KAOV4C,aAAe,SAACL,GACZ,EAAKd,SAAS,CACZoB,KAAON,EAAEO,OAAOC,MAChBC,SAAU,KAXE,EAelBC,aAAe,SAAC9C,GACZ,EAAKsB,SAAS,CACVoB,KAAO1C,EACP6C,SAAU,KAlBA,EAsBlBE,WAAa,WACT,EAAKzB,SAAS,CAAEoB,KAAO,MArBvB,EAAKhB,MAAQ,CACTgB,KAAO,GACPG,SAAU,GAJA,E,sEA0BR,IAAD,OACL,OACI,yBAAK3C,UAAU,sBACX,yBAAKA,UAAY,YACb,yBAAKA,UAAY,kBACb,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,+CAGR,yBAAKA,UAAU,YACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,oBACX,2BAAOM,KAAK,OAAON,UAAU,eAAe8C,YAAY,iBAChDC,aAAW,WAAWC,mBAAiB,gBACvCN,MAASX,KAAKP,MAAMgB,KACpBS,SAAYlB,KAAKQ,eAEzB,yBAAKvC,UAAU,sBACX,4BAAQA,UAAU,kBAAkBM,KAAK,SACrC8B,QAAW,WAAM,EAAKQ,aAAa,EAAKpB,MAAMgB,QADlD,gBAQxB,yBAAKxC,UAAY,aACb,yBAAKA,UAAY,UACZJ,QAAQC,IAAIkC,KAAKP,MAAMgB,MACvBT,KAAKP,MAAMmB,SAAW,kBAAC,EAAD,CAAO1B,WAAcc,KAAKP,MAAMgB,KAAMK,WAAcd,KAAKc,oB,GAzDpER,aCUrBa,EATH,WACV,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.ebe5e473.chunk.js","sourcesContent":["import Search from './Search'\nimport React from 'react'\n\nconst UserInfo = (props) => {\n    {console.log(props.name.id)}\n    const style = {\n        maxHeight : \"250px\"\n    }\n    return (\n\n        <div>\n             <div className = \"container bg-light\">\n                <div className = \"row\">\n                    <div className = \"col-4\">\n                        <img className = \"img-fluid\" style = {style} src={props.name.avatar_url} />\n                    </div>\n                    <div className = \"col-8\">\n                        <div className = \"row text-center\">\n                            <div className = \"col-6\">\n                                <div>Name:</div>\n                            </div>\n                            <div className = \"col-6\">\n                                <div>{props.name.login} </div>\n                            </div>\n                        </div>\n                        <div className = \"row text-center\">\n                            <div className = \"col-6\">\n                                <div>Type:</div>\n                            </div>\n                            <div className = \"col-6\">\n                                <div>{props.name.type} </div>\n                            </div>\n                        </div>\n                        <div className = \"row text-center\">\n                            <div className = \"col-6\">\n                                <div>Github Account Link:</div>\n                            </div>\n                            <div className = \"col-6\">\n                                <div><a href={props.name.html_url}>My Github Acc</a></div>\n                            </div>\n                        </div>\n                        <div className = \"row text-center\">\n                            <div className = \"col-6\">\n                                <div>ID</div>\n                            </div>\n                            <div className = \"col-6\">\n                                <div>{props.name.id} </div>\n                            </div>\n                        </div>\n                        <div className = \"row text-center\">\n                            <div className = \"col-6\">\n                                <div>Github Repository Link</div>\n                            </div>\n                            <div className = \"col-6\">\n                                <div><a href={props.name.repos_url}>My Github Repos </a> </div>\n                            </div>\n                        </div>\n                        <div className = \"row text-center\">\n                            <div className = \"col-6\">\n                                <div>My Score:</div>\n                            </div>\n                            <div className = \"col-6\">\n                                <div>{props.name.score} </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default UserInfo;","import React, { Component } from 'react'\nimport UserInfo from './UserInfo'\nimport axios from \"axios\";\nexport default class Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            profiles : [],\n            name : [],\n            showTable: true\n        }\n    }\n    \n    componentDidMount = () => {\n        axios.get('https://api.github.com/search/users', {\n            params: {\n              q: this.props.userSearch\n            }\n          }).then(response => {\n            this.setState({profiles : response.data.items})\n            console.log(this.state.profiles)\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n    }\n\n    showUser = (data) => {\n        this.setState({\n            name : data,\n            showTable : false\n        })\n        \n    }\n    \n    render() {\n        const style = {\n            width : \"50px\",\n            height : \"50px\"\n            \n        }\n        return (\n            <div>\n                {this.state.showTable &&\n                    <table className=\"table\">\n                        <thead className=\"thead-dark\">\n                            <tr>\n                                <th scope=\"col\">ID</th>\n                                <th scope=\"col\">Login Name</th>\n                                <th scope=\"col\">Profile Pic</th>\n                                <th scope=\"col\">Type</th>\n                                <th scope=\"col\">Score</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.profiles.map((e) => {\n                                return( \n                                    <tr key = {e.id}>\n                                        <td>{e.id} </td>\n                                        <td>{e.login} </td>\n                                        <td ><img onClick = {()=>{this.showUser(e)}} style = {style} src={e.avatar_url} /></td>\n                                        <td> {e.type} </td>\n                                        <td>{e.score} </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                }\n                {!this.state.showTable &&\n                    <UserInfo name = {this.state.name} />\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Table from './Table'\n\nexport default class Search extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            user : \"\",\n            clicked : false\n        }\n    }\n\n    handleChange = (e) =>{\n        this.setState({\n          user : e.target.value,\n          clicked : false\n        })\n    }\n\n    handleSubmit = (name) =>{\n        this.setState({\n            user : name,\n            clicked : true\n        })\n    }\n\n    resetInput = () => {\n        this.setState({ user : \"\" })\n    }\n\n    render() {\n        return (\n            <div className=\"container bg-light\">\n                <div className = \"row my-3\">\n                    <div className = \"col-8 offset-2\">\n                        <div className=\"row\">\n                            <div className=\"col text-center\">\n                                <h1>Github Search</h1>\n                            </div>\n                        </div>\n                        <div className=\"row mt-3\">\n                            <div className=\"col text-center\">\n                                <div className=\"input-group mb-3\">\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter Username\" \n                                            aria-label=\"Username\" aria-describedby=\"button-addon2\"\n                                            value = {this.state.user} \n                                            onChange = {this.handleChange}\n                                    />\n                                    <div className=\"input-group-append\">\n                                        <button className=\"btn btn-primary\" type=\"button\" \n                                            onClick = {() =>{this.handleSubmit(this.state.user)}} >Submit</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>                                                                                \n                    </div> \n                </div>\n                <div className = \"row my-3 \">\n                    <div className = \"col-12\">\n                        {console.log(this.state.user)}\n                        {this.state.clicked && <Table userSearch = {this.state.user} resetInput = {this.resetInput} /> }\n                    </div>\n                </div>  \n            </div>\n        )\n    }\n}\n","import \"./App.css\";\nimport Search from \"./components/Search\";\nimport React from 'react'\n\nconst App = () => {\n  return (\n    <div>\n      <Search />\n    </div>\n  )\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}